name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  HELM_VERSION: v3.15.2
  PGO_VERSION: 5.7.4

jobs:
  test:
    name: Helm tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Run Helm unit tests
        run: make tests

  integration:
    name: Integration Tests (K3s)
    if: github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      contents: 'read'
      id-token: 'write'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Start K3s cluster
        uses: jupyterhub/action-k3s-helm@v4
        with:
          k3s-channel: latest
          helm-version: ${{ env.HELM_VERSION }}
          metrics-enabled: false
          docker-enabled: true

      - name: Set release name
        run: echo "RELEASE_NAME=eoapi-$(echo "${{ github.sha }}" | cut -c1-8)" >> "$GITHUB_ENV"

      - name: Deploy eoAPI
        id: deploy
        continue-on-error: true
        run: |
          echo "=== Starting eoAPI deployment ==="
          export RELEASE_NAME="$RELEASE_NAME"
          export PGO_VERSION="${{ env.PGO_VERSION }}"
          export GITHUB_SHA="${{ github.sha }}"
          ./scripts/deploy.sh --ci

      - name: Check deployment status
        id: check
        if: steps.deploy.outcome == 'success'
        run: |
          echo "=== Checking deployment status ==="
          export RELEASE_NAME="$RELEASE_NAME"
          ./scripts/test.sh check-deployment --debug

      - name: Debug pgstac jobs if deployment failed
        if: steps.deploy.outcome == 'failure'
        continue-on-error: true
        run: |
          echo "=== Debugging pgstac job failures ==="

          # Check pgstac-migrate job
          echo "===== pgstac-migrate Job Status ====="
          kubectl get jobs -l app.kubernetes.io/name=pgstac-migrate -o wide || echo "No pgstac-migrate jobs found"

          MIGRATE_PODS=$(kubectl get pods -l app.kubernetes.io/name=pgstac-migrate -o jsonpath='{.items[*].metadata.name}' 2>/dev/null)
          if [ -n "$MIGRATE_PODS" ]; then
            for POD in $MIGRATE_PODS; do
              echo "--- Logs from migrate pod $POD ---"
              kubectl logs "$POD" --tail=100 || true
              echo "--- Description of migrate pod $POD ---"
              kubectl describe pod "$POD"
            done
          fi

          # Check pgstac-load-samples job
          echo "===== pgstac-load-samples Job Status ====="
          kubectl get jobs -l app.kubernetes.io/name=pgstac-load-samples -o wide || echo "No pgstac-load-samples jobs found"

          SAMPLES_PODS=$(kubectl get pods -l app.kubernetes.io/name=pgstac-load-samples -o jsonpath='{.items[*].metadata.name}' 2>/dev/null)
          if [ -n "$SAMPLES_PODS" ]; then
            for POD in $SAMPLES_PODS; do
              echo "--- Logs from samples pod $POD ---"
              kubectl logs "$POD" --tail=100 || true
              echo "--- Description of samples pod $POD ---"
              kubectl describe pod "$POD"
            done
          fi

          # Check database status
          echo "===== Database Pod Status ====="
          kubectl get pods -l postgres-operator.crunchydata.com/cluster -o wide
          kubectl get postgrescluster -o wide

          # Check ConfigMaps
          echo "===== Relevant ConfigMaps ====="
          kubectl get configmaps | grep -E "initdb|pgstac" || echo "No relevant configmaps found"

          # Check for any related events
          echo "===== Related Kubernetes Events ====="
          kubectl get events | grep -E "pgstac|initdb" || echo "No relevant events found"

          exit 1

      - name: Run integration tests
        if: steps.deploy.outcome == 'success'
        run: |
          echo "=== Running integration tests ==="
          export RELEASE_NAME="$RELEASE_NAME"
          ./scripts/test.sh integration --debug

      - name: Debug deployment status
        if: always()
        run: |
          echo "=== Final Deployment Status ==="
          kubectl get pods -o wide
          kubectl get jobs -o wide
          kubectl get services -o wide
          kubectl get ingress


      - name: Cleanup
        if: always()
        run: |
          helm uninstall "$RELEASE_NAME" || true
