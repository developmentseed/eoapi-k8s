name: CI

# On every pull request, but only on push to main
on:
  push:
    branches:
    - main
    paths: []
    # only run jobs if some code have changed
    #- 'helm-chart/eoapi/**'
  pull_request:
    branches:
      - main

jobs:
  helm-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: d3adb5/helm-unittest-action@v2
        with:
          helm-version: v3.8.2
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          cd helm-chart
          helm unittest eoapi -f 'tests/*.yaml' -v eoapi/test-helm-values.yaml
  unit-tests:
    permissions:
      contents: 'read'
      id-token: 'write'
    needs: helm-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: azure/setup-helm@v3
        with:
          helm-version: v3.8.2
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: set k8s namespace name for parallel tests
        run: |
          random_number="${RANDOM}${RANDOM}${RANDOM}"
          # Limit it to 10 digits
          RANDOMNESS=$(echo $random_number | cut -c 1-10)
          #echo "NS_NAME=unittest-$RANDOMNESS" >> $GITHUB_ENV
          echo "NS_NAME=eoapitest" >> $GITHUB_ENV

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          service_account: 'k8seed-deploy@devseed-labs.iam.gserviceaccount.com'
          credentials_json: ${{ secrets.GH_ACTIONS_SA_JSON }}

      - name: setup gcloud sdk
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '>= 363.0.0'
          project_id: 'devseed-labs'
          service_account_key: ${{ secrets.GH_ACTIONS_SA_TOKEN }}
          export_default_credentials: true

      - name: configure kubectl context
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud container clusters get-credentials k8seed-labs-cluster --zone us-central1-f

      - name: helm render/install eoapi templates
        run: |
          export PGUSER=username
          export POSTGRES_USER=username
          export PGPASSWORD=password
          export POSTGRES_PASSWORD=password
          export GITSHA='${{github.sha}}'

          cd helm-chart

          helm install \
                --namespace $NS_NAME \
                --create-namespace \
                --set gitSha=$GITSHA \
                --set db.settings.secrets.PGUSER=$PGUSER \
                --set db.settings.secrets.POSTGRES_USER=$POSTGRES_USER \
                --set db.settings.secrets.PGPASSWORD=$PGPASSWORD \
                --set db.settings.secrets.POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
                -f ./eoapi/values.yaml \
                -f ./eoapi/test-unittest-values.yaml \
                eoapi \
                ./eoapi

      - name: sleep for 10s seconds while services boot
        shell: bash
        run: sleep 10s

      - name: restart the services
        run: |
          kubectl config set-context --current --namespace=$NS_NAME
          while [[ -z "$(kubectl get pod  | grep '^raster-.*$'  | cut -d' ' -f1 | xargs -I{} kubectl logs pod/{} | grep "startup complete" | head -n 1)" ]]; do
            echo "still waiting for raster service to start..."
            sleep 1
          done
          echo "raster service has started, moving on..."
          while [[ -z "$(kubectl get pod  | grep '^vector-.*$'  | cut -d' ' -f1 | xargs -I{} kubectl logs pod/{} | grep "startup complete" | head -n 1)" ]]; do
            echo "still waiting for vector service to start..."
            sleep 1
          done
          echo "vector service has started, moving on..."
          while [[ -z "$(kubectl get pod  | grep '^stac-.*$'  | cut -d' ' -f1 | xargs -I{} kubectl logs pod/{} | grep "startup complete" | head -n 1)" ]]; do
            echo "still waiting for stac service to start..."
            sleep 1
          done
          echo "all services have started, moving on..."

      - name: install python unit-test dependencies
        run: |
          python -m pip install pytest httpx

#      - name: Setup upterm session
#        uses: lhotari/action-upterm@v1

      - name: run the tests
        run: |
          kubectl config set-context --current --namespace=$NS_NAME
          PUBLICIP='http://'$(kubectl -n ingress-nginx get svc/ingress-nginx-controller -o jsonpath='{.spec.loadBalancerIP}')
          echo '#################################'
          echo $PUBLICIP
          echo '#################################'

          # first substitute test endpoints in the test files
          # TODO: pytest should be able to have a pattern for injection here but moving fast
          sed -i "s|vector_endpoint\=.*$|vector_endpoint\='$PUBLICIP/vector'|g" .github/workflows/tests/test_vector.py
          head -n 5 .github/workflows/tests/test_vector.py
          pytest .github/workflows/tests/test_vector.py

          sed -i "s|stac_endpoint\=.*$|stac_endpoint\='$PUBLICIP/stac'|g" .github/workflows/tests/test_stac.py
          head -n 5 .github/workflows/tests/test_stac.py
          pytest .github/workflows/tests/test_stac.py

          sed -i "s|raster_endpoint\=.*$|raster_endpoint\='$PUBLICIP/raster'|g" .github/workflows/tests/test_raster.py
          head -n 5 .github/workflows/tests/test_raster.py
          pytest .github/workflows/tests/test_raster.py

      - name: helm uinstall eoapi templates
        run: |
          helm uninstall eoapi
          kubectl delete ns $NS_NAME
