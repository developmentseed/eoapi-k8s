name: CI

# On every pull request, but only on push to main
on:
  push:
    branches:
    - main
    paths: []
    # only run jobs if some code have changed
    #- 'helm-chart/eoapi/**'
  pull_request:
    branches:
      - main

jobs:
  helm-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: d3adb5/helm-unittest-action@v2
        with:
          helm-version: v3.8.2
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          cd helm-chart
          helm unittest eoapi -f 'tests/*.yaml' -v eoapi/test-helm-values.yaml
  unit-tests:
    needs: helm-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: azure/setup-helm@v3
        with:
          helm-version: v3.8.2
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: start minikube
        uses: medyagh/setup-minikube@master

      - name: test the cluster
        run: kubectl get pods -A

      - name: build images for unit tests
        run: |
          export SHELL=/bin/bash
          eval $(minikube -p minikube docker-env)
          docker build -f ./dockerfiles/Dockerfile.pgstac -t local/pgstac .
          docker build -f ./dockerfiles/Dockerfile.stac -t local/stac .
          docker build -f ./dockerfiles/Dockerfile.titiler -t local/titiler .
          docker build -f ./dockerfiles/Dockerfile.tipg -t local/tipg .
          echo -n "verifying images:"
          docker images

      - name: helm render/install eoapi templates
        run: |
          export PGUSER=username
          export POSTGRES_USER=username
          export PGPASSWORD=password
          export POSTGRES_PASSWORD=password
          export GITSHA='A12345'

          cd helm-chart

          helm install \
                --namespace default \
                --create-namespace \
                --set gitSha=$GITSHA \
                --set db.settings.secrets.PGUSER=$PGUSER \
                --set db.settings.secrets.POSTGRES_USER=$POSTGRES_USER \
                --set db.settings.secrets.PGPASSWORD=$PGPASSWORD \
                --set db.settings.secrets.POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
                -f ./eoapi/values.yaml \
                -f ./eoapi/test-unittest-values.yaml \
                eoapi \
                ./eoapi

      - name: sleep for 10s seconds while services boot
        shell: bash
        run: sleep 10s

      - name: restart the services
        run: |
          # usually if a pod fails b/c the DB isn't up yet it will go into CrashLoopBackOff state and then restart
          # and then the service is fine but minikube doesn't seem to restart things for some reason, could be
          # that the underlying CMD(s) don't fully exit so we need to restart the services here
          kubectl rollout restart deploy/vector
          kubectl rollout restart deploy/stac
          kubectl rollout restart deploy/raster

          sleep 10s

          while [[ -z "$(kubectl get pod  | grep '^raster-.*$'  | cut -d' ' -f1 | xargs -I{} kubectl logs pod/{} | grep "startup complete" | head -n 1)" ]]; do
            echo "still waiting for raster service to start..."
            sleep 1
          done
          echo "raster service has started, moving on..."
          while [[ -z "$(kubectl get pod  | grep '^vector-.*$'  | cut -d' ' -f1 | xargs -I{} kubectl logs pod/{} | grep "startup complete" | head -n 1)" ]]; do
            echo "still waiting for vector service to start..."
            sleep 1
          done
          echo "vector service has started, moving on..."
          while [[ -z "$(kubectl get pod  | grep '^stac-.*$'  | cut -d' ' -f1 | xargs -I{} kubectl logs pod/{} | grep "startup complete" | head -n 1)" ]]; do
            echo "still waiting for stac service to start..."
            sleep 1
          done
          echo "all services have started, moving on..."

          sleep 10s

      - name: test service urls
        run: |
          minikube service list
#          echo "------------------opening the service------------------"
#          curl -XGET "$(minikube service vector --url)"
#          curl -XGET "$(minikube service stac --url)"
#          curl -XGET "$(minikube service raster --url)"

      - name: install python unit-test dependencies
        run: |
          python -m pip install pytest httpx

#      - name: Setup upterm session
#        uses: lhotari/action-upterm@v1

      - name: run the tests
        run: |
          # first substitute test endpoints in the test files
          # TODO: pytest should be able to have a pattern for injection here but moving fast
          URL=$(minikube service vector --url)
          sed -i "s|vector_endpoint\=.*$|vector_endpoint\='$URL'|g" .github/workflows/tests/test_vector.py
          head -n 5 .github/workflows/tests/test_vector.py
          pytest .github/workflows/tests/test_vector.py

          URL=$(minikube service stac --url)
          sed -i "s|stac_endpoint\=.*$|stac_endpoint\='$URL'|g" .github/workflows/tests/test_stac.py
          head -n 5 .github/workflows/tests/test_stac.py
          pytest .github/workflows/tests/test_stac.py

          URL=$(minikube service raster --url)
          sed -i "s|raster_endpoint\=.*$|raster_endpoint\='$URL'|g" .github/workflows/tests/test_raster.py
          head -n 5 .github/workflows/tests/test_raster.py
          pytest .github/workflows/tests/test_raster.py

