name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  HELM_VERSION: v3.15.2
  PGO_VERSION: 5.7.4

jobs:
  test:
    name: Helm tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Run Helm unit tests
        run: make tests

  k3s-integration-tests:
    name: K3s Integration Tests
    if: github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      contents: 'read'
      id-token: 'write'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Start K3s cluster
        uses: jupyterhub/action-k3s-helm@v4
        with:
          k3s-channel: latest
          helm-version: ${{ env.HELM_VERSION }}
          metrics-enabled: false
          docker-enabled: true

      - name: Set release name
        run: echo "RELEASE_NAME=eoapi-$(echo "${{ github.sha }}" | cut -c1-8)" >> "$GITHUB_ENV"

      - name: Wait for K3s to be fully ready
        run: |
          echo "=== Waiting for K3s to be fully ready ==="

          # Wait for core K3s components to be ready
          echo "Waiting for kube-system pods to be ready..."
          kubectl wait --for=condition=Ready pod -l k8s-app=kube-dns -n kube-system --timeout=300s
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=traefik -n kube-system --timeout=300s

          # Wait for API server to be fully responsive
          echo "Checking API server responsiveness..."
          kubectl get nodes
          kubectl get pods --all-namespaces

          # Give K3s a moment to initialize all CRDs
          echo "Waiting for K3s initialization to complete..."
          sleep 10

          echo "✅ K3s is ready"

      - name: Install Knative Serving
        run: |
          echo "=== Installing Knative Serving ==="
          # Install Knative Serving CRDs
          kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.17.0/serving-crds.yaml
          # Install Knative Serving core components
          kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.17.0/serving-core.yaml
          # Install Kourier networking layer for Knative
          kubectl apply -f https://github.com/knative/net-kourier/releases/download/knative-v1.17.0/kourier.yaml
          # Configure Knative to use Kourier
          kubectl patch configmap/config-network \
            --namespace knative-serving \
            --type merge \
            --patch '{"data":{"ingress-class":"kourier.ingress.networking.knative.dev"}}'
          # Wait for Knative Serving to be ready
          echo "Waiting for Knative Serving to be ready..."
          kubectl wait --for=condition=Ready pod -l app=controller -n knative-serving --timeout=300s
          kubectl wait --for=condition=Ready pod -l app=webhook -n knative-serving --timeout=300s
          kubectl wait --for=condition=Ready pod -l app=3scale-kourier-gateway -n kourier-system --timeout=300s

      - name: Install Knative Eventing
        run: |
          echo "=== Installing Knative Eventing ==="
          # Install Knative Eventing CRDs (includes SinkBinding)
          kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.17.0/eventing-crds.yaml
          # Install Knative Eventing core components
          kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.17.0/eventing-core.yaml
          # Wait for Knative Eventing to be ready
          echo "Waiting for Knative Eventing to be ready..."
          kubectl wait --for=condition=Ready pod -l app=eventing-controller -n knative-eventing --timeout=300s
          kubectl wait --for=condition=Ready pod -l app=eventing-webhook -n knative-eventing --timeout=300s

      - name: Deploy CloudEvents sink for eoapi-notifier
        run: |
          echo "=== Deploying CloudEvents sink ==="
          # Create the namespace first
          kubectl create namespace eoapi || true
          # Deploy the CloudEvents sink service
          kubectl apply -f charts/eoapi/samples/cloudevents-sink.yaml
          # Wait for the Knative service to be ready
          echo "Waiting for CloudEvents sink to be ready..."
          kubectl wait --for=condition=Ready ksvc/eoapi-cloudevents-sink -n eoapi --timeout=300s

      - name: Wait for Traefik to be ready
        run: |
          echo "=== Waiting for Traefik to be ready ==="

          # Wait for Traefik pods to be ready first
          echo "Waiting for Traefik controller to be ready..."
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=traefik -n kube-system --timeout=300s

          # Wait for essential Traefik CRDs to be available
          echo "Checking for Traefik CRDs..."
          timeout=300
          counter=0
          required_crds=("middlewares.traefik.io" "ingressroutes.traefik.io")

          for crd in "${required_crds[@]}"; do
            echo "Checking for CRD: $crd"
            counter=0
            while [ $counter -lt $timeout ]; do
              if kubectl get crd "$crd" &>/dev/null; then
                echo "✅ $crd is available"
                break
              fi
              echo "⏳ Waiting for $crd... ($counter/$timeout)"
              sleep 3
              counter=$((counter + 3))
            done

            if [ $counter -ge $timeout ]; then
              echo "❌ Timeout waiting for $crd"
              echo "Available Traefik CRDs:"
              kubectl get crd | grep traefik || echo "No Traefik CRDs found"
              echo "All CRDs:"
              kubectl get crd
              exit 1
            fi
          done

          echo "✅ All required Traefik CRDs are ready"

      - name: Deploy eoAPI
        id: deploy
        run: |
          echo "=== Starting eoAPI deployment ==="
          export RELEASE_NAME="$RELEASE_NAME"
          export PGO_VERSION="${{ env.PGO_VERSION }}"
          export GITHUB_SHA="${{ github.sha }}"
          ./scripts/deploy.sh --ci

      - name: Run integration tests
        run: |
          echo "=== Running integration tests ==="
          export RELEASE_NAME="$RELEASE_NAME"
          ./scripts/test.sh integration --debug

      - name: Debug failed deployment
        if: failure()
        run: |
          echo "=== Deployment failed - collecting debug information ==="
          kubectl get pods -o wide
          kubectl get jobs -o wide
          kubectl get services -o wide
          kubectl get events --sort-by='.lastTimestamp' | tail -20 || true

          # Check Knative installation status
          echo "=== Knative Installation Status ==="
          kubectl get pods -n knative-serving -o wide || echo "Knative Serving not installed"
          kubectl get pods -n knative-eventing -o wide || echo "Knative Eventing not installed"
          kubectl get pods -n kourier-system -o wide || echo "Kourier not installed"
          # Check Knative CRDs
          echo "=== Knative CRDs Status ==="
          kubectl get crd | grep knative || echo "No Knative CRDs found"
          kubectl get crd sinkbindings.sources.knative.dev || echo "SinkBinding CRD not found"

          # Check Traefik status
          echo "=== Traefik Status ==="
          kubectl get pods -n kube-system -l app.kubernetes.io/name=traefik -o wide || echo "No Traefik pods found"
          kubectl get crd | grep traefik || echo "No Traefik CRDs found"
          kubectl get crd middlewares.traefik.io || echo "Middleware CRD not found"
          kubectl get crd ingressroutes.traefik.io || echo "IngressRoute CRD not found"

          # Check notification system final status
          echo "=== Notification System Final Status ==="
          kubectl get deployments -l app.kubernetes.io/name=eoapi-notifier -o wide || echo "No eoapi-notifier deployment"
          kubectl get pods -l app.kubernetes.io/name=eoapi-notifier -o wide || echo "No eoapi-notifier pods"
          kubectl get ksvc -n eoapi -o wide || echo "No Knative services in eoapi namespace"
          kubectl get ksvc eoapi-cloudevents-sink -n eoapi -o wide || echo "No eoapi-cloudevents-sink Knative service"
          kubectl get pods -l serving.knative.dev/service=eoapi-cloudevents-sink -n eoapi -o wide || echo "No CloudEvents sink pods"
          # Check SinkBinding resources
          echo "=== SinkBinding Resources ==="
          kubectl get sinkbindings -A -o wide || echo "No SinkBinding resources found"

          # Show notification logs if they exist
          echo "=== eoapi-notifier Logs ==="
          kubectl logs -l app.kubernetes.io/name=eoapi-notifier --tail=20 || echo "No eoapi-notifier logs"
          echo "=== Knative CloudEvents Sink Logs ==="
          kubectl logs -l serving.knative.dev/service=eoapi-cloudevents-sink -n eoapi --tail=20 || echo "No CloudEvents sink logs"
          # Show Knative system logs if there are issues
          echo "=== Knative Serving Controller Logs ==="
          kubectl logs -n knative-serving -l app=controller --tail=20 || echo "No Knative Serving controller logs"
          echo "=== Knative Eventing Controller Logs ==="
          kubectl logs -n knative-eventing -l app=eventing-controller --tail=20 || echo "No Knative Eventing controller logs"


      - name: Cleanup
        if: always()
        run: |
          helm uninstall "$RELEASE_NAME" || true
