name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  HELM_VERSION: v3.15.2
  PGO_VERSION: 5.7.4

jobs:
  test:
    name: Helm tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install helm unittest plugin
        run: helm plugin install https://github.com/helm-unittest/helm-unittest

      - run: |
          cd charts
          helm unittest eoapi -f 'tests/*.yaml' -v eoapi/test-helm-values.yaml
          # Run autoscaling-specific unit tests
          helm unittest eoapi -f 'tests/autoscaling_tests.yaml'

  k3s-integration-tests:
    if: github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      contents: 'read'
      id-token: 'write'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Start K3s cluster
        uses: jupyterhub/action-k3s-helm@v4
        with:
          k3s-channel: latest
          helm-version: ${{ env.HELM_VERSION }}
          metrics-enabled: false
          docker-enabled: true

      - name: Set release name
        run: echo "RELEASE_NAME=eoapi-$(echo "${{ github.sha }}" | cut -c1-8)" >> "$GITHUB_ENV"

      - name: Deploy eoAPI
        id: deploy
        run: |
          echo "=== Starting eoAPI deployment ==="
          export RELEASE_NAME="$RELEASE_NAME"
          export PGO_VERSION="${{ env.PGO_VERSION }}"
          export GITHUB_SHA="${{ github.sha }}"
          ./scripts/deploy.sh --ci


      - name: Run integration tests
        run: |
          echo "=== Running integration tests ==="
          export RELEASE_NAME="$RELEASE_NAME"
          ./scripts/test.sh integration --debug

      - name: Debug failed deployment
        if: failure()
        run: |
          echo "=== Deployment failed - collecting debug information ==="
          kubectl get pods -o wide
          kubectl get jobs -o wide
          kubectl get services -o wide
          kubectl get events --sort-by='.lastTimestamp' | tail -20 || true

          # Check notification system final status
          echo "=== Notification System Final Status ==="
          kubectl get deployments -l app.kubernetes.io/name=eoapi-notifier -o wide || echo "No eoapi-notifier deployment"
          kubectl get pods -l app.kubernetes.io/name=eoapi-notifier -o wide || echo "No eoapi-notifier pods"
          kubectl get ksvc -l app.kubernetes.io/component=cloudevents-sink -o wide || echo "No Knative CloudEvents sink"
          kubectl get pods -l serving.knative.dev/service -o wide || echo "No Knative CloudEvents sink pods"

          # Show notification logs if they exist
          echo "=== eoapi-notifier Logs ==="
          kubectl logs -l app.kubernetes.io/name=eoapi-notifier --tail=20 || echo "No eoapi-notifier logs"
          echo "=== Knative CloudEvents Sink Logs ==="
          kubectl logs -l serving.knative.dev/service --tail=20 || echo "No Knative CloudEvents sink logs"


      - name: Cleanup
        if: always()
        run: |
          helm uninstall "$RELEASE_NAME" || true
