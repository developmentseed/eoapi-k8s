# most of this was cribbed from https://github.com/2i2c-org/infrastructure/blob/master/helm-charts/support/
# so giving props where props are due to Yuvi Panda :sparkles:
prometheus-adapter:
  prometheus:
    # NOTE: the `url` below make some assumptions about the namespace where you released eoapi and prometheus
    # 1) that you didn't change the default name of the `prometheus-server` or the port and installed in eoapi namespace
    # 2) namely that you ran `helm install eoapi --create-namespace=eoapi`  with the `eoapi` namespace
    url: http://eoapi-support-prometheus-server.eoapi.svc.cluster.local
    port: 80
    path: ""
  rules:
    default: false
    # NOTE: the `name.as` values below make some assumptions about your release name
    # namely that you have run `helm install eoapi eoapi/eoapi --create-namespace=eoapi`
    custom:
    - seriesQuery: '{__name__=~"^nginx_ingress_controller_requests$",namespace!=""}'
      seriesFilters: []
      resources:
        template: <<.Resource>>
      name:
        matches: ""
        as: "nginx_ingress_controller_requests_rate_vector_eoapi"
      metricsQuery: round(sum(rate(<<.Series>>{service="vector",path=~"/vector.*",<<.LabelMatchers>>}[5m])) by (<<.GroupBy>>), 0.001)
    - seriesQuery: '{__name__=~"^nginx_ingress_controller_requests$",namespace!=""}'
      seriesFilters: []
      resources:
        template: <<.Resource>>
      name:
        matches: ""
        as: "nginx_ingress_controller_requests_rate_raster_eoapi"
      metricsQuery: round(sum(rate(<<.Series>>{service="raster",path=~"/raster.*",<<.LabelMatchers>>}[5m])) by (<<.GroupBy>>), 0.001)
    - seriesQuery: '{__name__=~"^nginx_ingress_controller_requests$",namespace!=""}'
      seriesFilters: []
      resources:
        template: <<.Resource>>
      name:
        matches: ""
        as: "nginx_ingress_controller_requests_rate_stac_eoapi"
      metricsQuery: round(sum(rate(<<.Series>>{service="stac",path=~"/stac.*",<<.LabelMatchers>>}[5m])) by (<<.GroupBy>>), 0.001)

prometheus:
  # alertmanager is an optional prometheus chart dependency that we opt-out from
  # as we favor Grafana for this functionality. Grafana provides alerts and does
  # so with a better UI that we expose publicly behind auth anyhow.
  #
  alertmanager:
    enabled: false

  # prometheus-pushgateway is an optional prometheus chart dependency that we
  # opt-out from. pushgateway provides a way to complement prometheus server's
  # behavior of scraping metrics from services by allowing services to push
  # metrics to prometheus.
  #
  prometheus-pushgateway:
    enabled: false

  # kube-state-metrics is deployed by default but listing here just so we know it is
  kube-state-metrics:
    enabled: true

  # prometheus-node-exporter is an optional prometheus chart dependency that we
  # rely on to collect metrics about the nodes
  #
  # values ref: https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus-node-exporter/values.yaml
  #
  prometheus-node-exporter:
    # resources for the node-exporter was set after inspecting cpu and memory
    # use via prometheus and grafana.
    #
    # node-exporter is typically found using between 0-3m CPU and 2-22Mi memory,
    # but we've seen it fail to report cpu/memory use metrics from time to time
    # when requesting and limiting to 5m, so we've increased requests/limit it
    # to 10m.
    #
    # PromQL queries for CPU and memory use:
    # - CPU:    sum(rate(container_cpu_usage_seconds_total{container="node-exporter", namespace="support"}[5m])) by (pod)
    # - Memory: sum(container_memory_usage_bytes{container="node-exporter", namespace="support"}) by (pod)
    #
    resources:
      limits:
        cpu: 10m
        memory: 30Mi
      requests:
        cpu: 10m
        memory: 30Mi
  server:
    service:
      annotations:
        service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
        service.beta.kubernetes.io/aws-load-balancer-internal: "false"
      type: LoadBalancer

grafana:
  persistence:
    enabled: false
  deploymentStrategy:
    type: Recreate
  service:
    type: LoadBalancer
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-internal: "false"
  rbac:
    namespaced: true
    pspEnabled: false
  # initChownData refers to an init container enabled by default that isn't
  # needed as we don't reconfigure the linux user the grafana server will run
  # as.
  initChownData:
    enabled: false

  # resources for grafana was set after inspecting cpu and memory use via
  # prometheus and grafana.
  #
  # Grafana's memory use seems to increase over time but seems reasonable to
  # stay below 200Mi for years to come. Grafana's CPU use seems miniscule with
  # peaks at up to 9m CPU from one user is browsing its dashboards.
  #
  # PromQL queries for CPU and memory use:
  # - CPU:    sum(rate(container_cpu_usage_seconds_total{container="grafana", namespace="support"}[5m])) by (pod)
  # - Memory: sum(container_memory_usage_bytes{container="grafana", namespace="support"}) by (pod)
  #
  resources:
    limits:
      cpu: 100m
      memory: 200Mi
    requests:
      cpu: 10m
      memory: 200Mi

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      # Automatically add the prometheus server in the same namespace as the grafana as a datasource
      - name: prometheus
        orgId: 1
        type: prometheus
        # NOTE: the `url` below make some assumptions about the namespace where you released eoapi and prometheus
        # 1) that you didn't change the default name of the `prometheus-server` or the port and installed in eoapi namespace
        # 2) namely that you ran `helm install eoapi --create-namespace=eoapi`  with the `eoapi` namespace
        url: http://eoapi-support-prometheus-server.eoapi.svc.cluster.local
        access: proxy
        jsonData:
          timeInterval: "5s"
        isDefault: true
        editable: true
        version: 1 # This number should be increased when changes are made to update the datasource

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default

  dashboardsConfigMaps:
    default: "eoapi-dashboards"
