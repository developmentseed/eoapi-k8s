{{- include "eoapi.validateTraefik" . -}}
{{- if and .Values.ingress.enabled (eq .Values.ingress.className "traefik") }}
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: path-rewrite-middleware-{{ $.Release.Name }}
  namespace: {{ $.Release.Namespace }}
spec:
  replacePathRegex:
    regex: "^/(raster|vector|stac){{ $.Release.Name }}(/|$)(.*)"
    replacement: "$1{{ $.Release.Name }}/$3"
{{- end }}
---
{{- if (and (.Values.ingress.enabled) (eq .Values.ingress.className "traefik")) }}
{{- if semverCompare ">=1.19-0" $.Capabilities.KubeVersion.GitVersion -}}
apiVersion: networking.k8s.io/v1
{{- else if semverCompare ">=1.14-0" $.Capabilities.KubeVersion.GitVersion -}}
apiVersion: networking.k8s.io/v1beta1
{{- else -}}
apiVersion: extensions/v1beta1
{{- end }}
kind: Ingress
metadata:
  name: traefik-service-ingress-shared-{{ $.Release.Name }}
  labels:
    app: traefiksharedingress
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
    traefik.ingress.kubernetes.io/router.middlewares: "{{ $.Release.Namespace }}-path-rewrite-middleware-{{ $.Release.Name }}@kubernetescrd"
    {{- if (and (.Values.ingress.tls.enabled) (.Values.ingress.tls.certManager)) }}
    cert-manager.io/issuer: {{ .Values.ingress.tls.certManagerIssuer }}
    {{- end }}
{{- if (.Values.ingress.annotations) }}
{{ toYaml .Values.ingress.annotations | indent 4 }}
{{- end }}
spec:
  {{- if (and (.Values.ingress.className) (semverCompare ">=1.18-0" $.Capabilities.KubeVersion.GitVersion)) }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  rules:
    - http:
        paths:
          {{- range $serviceName, $v := .Values }}
          {{- if (or (eq $serviceName "raster") (eq $serviceName "stac") (eq $serviceName "vector")) }}
          {{- if (and (index $v "enabled") (not $.Values.testing)) }}
          - pathType: Prefix
            path: "/{{ $serviceName }}"
            backend:
              service:
                name: {{ $serviceName }}
                port:
                  number: {{ $.Values.service.port }}
          {{- else if (and (index $v "enabled") ($.Values.testing)) }}
          - pathType: Prefix
            path: "/{{ $serviceName }}{{ $.Release.Name }}"
            backend:
              service:
                name: {{ $serviceName }}-{{ $.Release.Name }}
                port:
                  number: {{ $.Values.service.port }}
          {{- end }}{{/* END: if index $v "enabled" */}}
          {{- end }}{{/* END: if (or (eq $serviceName "raster") (eq $serviceName "stac") (eq $serviceName "vector")) */}}
          {{- end }}{{/* END: range $serviceName, $v := .Values*/}}
          {{- if (and (not $.Values.testing) (.Values.docServer.enabled)) }}
          - pathType: Prefix
            path: /(/|$)
            backend:
              service:
                name: doc-server
                port:
                  number: 80
          {{- end }}
      {{- if (and (not .Values.testing) (.Values.ingress.host)) }}
      host: {{ .Values.ingress.host }}
      {{- end }}
  {{- if (and (not .Values.testing) (.Values.ingress.host) (.Values.ingress.tls.enabled)) }}
  tls:
    - hosts:
        - {{ .Values.ingress.host }}
      secretName: {{ .Values.ingress.tls.secretName }}
  {{- end }}
---
{{- if (and (.Values.ingress.tls.enabled) (.Values.ingress.tls.certManager)) }}
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    # The ACME server URL
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: {{ .Values.ingress.tls.certManagerEmail }}
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-staging-key
    # Enable the HTTP-01 challenge provider
    solvers:
      - http01:
          ingress:
            class: traefik
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # The ACME server URL
    server: https://acme-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: {{ .Values.ingress.tls.certManagerEmail }}
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-prod-key
    # Enable the HTTP-01 challenge provider
    solvers:
      - http01:
          ingress:
            class: traefik
{{- end }}
{{/* END: if .Values.ingress.className "traefik" */}}
{{- end }}
