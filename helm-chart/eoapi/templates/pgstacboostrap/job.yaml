{{- if .Values.pgstacBootstrap.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: pgstac-migrate
  labels:
    app: pgstac-migrate
spec:
  template:
    metadata:
      labels:
        app: pgstac-migrate
    spec:
      restartPolicy: Never
      initContainers:
        - name: wait-for-db
          image: busybox
          command:
            {{- if .Values.testing }}
            - 'sh'
            - '-c'
            - 'until nc -z {{ $.Release.Name }}-pgbouncer 5432; do echo waiting for db; sleep 10; done;'
            {{- else }}
            - 'sh'
            - '-c'
            - 'until nc -z eoapi-pgbouncer 5432; do echo waiting for db; sleep 10; done;'
            {{- end }}
      containers:
        - name: pgstac-migrate
          image: {{ .Values.pgstacBootstrap.image.name }}:{{ .Values.pgstacBootstrap.image.tag }}
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              # Set standard PG environment variables from secrets
              export PGHOST=$POSTGRES_HOST
              export PGPORT=$POSTGRES_PORT
              export PGUSER=$POSTGRES_USER
              export PGPASSWORD=$POSTGRES_PASS
              export PGDATABASE=$POSTGRES_DBNAME
              
              # Run migration
              echo "Running PgSTAC migrations..."
              pypgstac pgready
              pypgstac migrate
              
              # Register PostGIS extension
              echo "Registering PostGIS extension..."
              psql -c "CREATE EXTENSION IF NOT EXISTS postgis;"
              
              # Apply settings
              echo "Applying PgSTAC settings..."
              psql -f /opt/settings/pgstac-settings.sql
              
              # Set permissions
              echo "Setting permissions..."
              psql -c "GRANT CONNECT ON DATABASE ${POSTGRES_DBNAME} TO ${POSTGRES_USER}; GRANT CREATE ON DATABASE ${POSTGRES_DBNAME} TO ${POSTGRES_USER}; GRANT USAGE ON SCHEMA public TO ${POSTGRES_USER}; ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON TABLES TO ${POSTGRES_USER}; ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL PRIVILEGES ON SEQUENCES TO ${POSTGRES_USER}; GRANT pgstac_read TO ${POSTGRES_USER}; GRANT pgstac_ingest TO ${POSTGRES_USER}; GRANT pgstac_admin TO ${POSTGRES_USER}; ALTER USER ${POSTGRES_USER} SET search_path TO pgstac, public;"
              
              echo "PgSTAC migration and setup complete"
          resources:
            {{- toYaml .Values.pgstacBootstrap.settings.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /opt/settings
              name: pgstac-settings-volume-{{ $.Release.Name }}
          env:
            {{ include "eoapi.pgstacSecrets" . | nindent 12 }}
      volumes:
        - name: pgstac-settings-volume-{{ $.Release.Name }}
          configMap:
            name: pgstac-settings-config-{{ $.Release.Name }}
      {{- with .Values.pgstacBootstrap.settings.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.pgstacBootstrap.settings.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  backoffLimit: 1
{{- end }}

{{- if and .Values.pgstacBootstrap.enabled (or .Values.pgstacBootstrap.settings.loadSamples (eq .Values.pgstacBootstrap.settings.envVars.LOAD_FIXTURES "true")) }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: pgstac-load-samples
  labels:
    app: pgstac-load-samples
spec:
  template:
    metadata:
      labels:
        app: pgstac-load-samples
    spec:
      restartPolicy: Never
      initContainers:
        - name: wait-for-migrate
          image: busybox
          command:
            - 'sh'
            - '-c'
            - 'sleep 30; echo "Waiting for pgstac-migrate job to complete"; exit 0'
      containers:
        - name: pgstac-load-samples
          image: {{ .Values.pgstacBootstrap.image.name }}:{{ .Values.pgstacBootstrap.image.tag }}
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              # Set standard PG environment variables from secrets
              export PGHOST=$POSTGRES_HOST
              export PGPORT=$POSTGRES_PORT
              export PGUSER=$POSTGRES_USER
              export PGPASSWORD=$POSTGRES_PASS
              export PGDATABASE=$POSTGRES_DBNAME
              
              # Load sample data
              echo "Loading sample collections..."
              pypgstac load collections /opt/data/noaa-emergency-response.json --method insert_ignore
              
              echo "Loading sample items..."
              pypgstac load items /opt/data/noaa-eri-nashville2020.json --method insert_ignore
              
              echo "Running custom SQL..."
              psql -f /opt/sql/initdb.sql
              
              echo "Sample data loading complete"
          resources:
            {{- toYaml .Values.pgstacBootstrap.settings.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /opt/sql
              name: initdb-sql-volume-{{ $.Release.Name }}
            - mountPath: /opt/data
              name: initdb-json-volume-{{ $.Release.Name }}
          env:
            {{ include "eoapi.pgstacSecrets" . | nindent 12 }}
      volumes:
        - name: initdb-sql-volume-{{ $.Release.Name }}
          configMap:
            name: initdb-sql-config-{{ $.Release.Name }}
        - name: initdb-json-volume-{{ $.Release.Name }}
          configMap:
            name: initdb-json-config-{{ $.Release.Name }}
      {{- with .Values.pgstacBootstrap.settings.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.pgstacBootstrap.settings.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  backoffLimit: 1
{{- end }}
