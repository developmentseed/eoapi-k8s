{{- if .Values.pgstacBootstrap.enabled }}
---
# This job initializes the PostgreSQL database with the necessary schema and data.
# Instead of using an initContainer in the deployment to wait for this job to complete,
# we use Helm hooks to control the execution order:
# 
# 1. The "post-install,post-upgrade" hook ensures this job runs after the postgres 
#    dependency is installed but before other resources (like deployments)
# 2. The "-5" hook-weight ensures this job runs after its ConfigMaps (weight -6)
# 3. The "before-hook-creation,hook-succeeded" delete policy ensures the job is recreated
#    on each helm install/upgrade and is cleaned up after successful completion
#
apiVersion: batch/v1
kind: Job
metadata:
  name: pgstac-migrate
  labels:
    app: pgstac-migrate
  annotations:
    helm.sh/hook: "post-install,post-upgrade"
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: "before-hook-creation,hook-succeeded"
spec:
  template:
    metadata:
      labels:
        app: pgstac-migrate
    spec:
      restartPolicy: Never
      containers:
        - name: pgstac-migrate
          image: {{ .Values.pgstacBootstrap.image.name }}:{{ .Values.pgstacBootstrap.image.tag }}
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              # Set standard PG environment variables from secrets
              export PGHOST=$POSTGRES_HOST
              export PGPORT=$POSTGRES_PORT
              export PGUSER=$POSTGRES_USER
              export PGPASSWORD=$POSTGRES_PASS
              export PGDATABASE=$POSTGRES_DBNAME

              # Print the environment variables for debugging
              echo "PGHOST: $PGHOST"
              echo "PGPORT: $PGPORT"
              echo "PGUSER: $PGUSER"
              echo "PGDATABASE: $PGDATABASE"
              echo "PGPASSWORD: $PGPASSWORD"
              echo "PGADMIN_URI: $PGADMIN_URI"
                            
              # Wait for the database to be ready
              echo "Waiting for database to be ready..."
              pypgstac pgready

              # Exit immediately if a command exits with a non-zero status
              set -e
              
              # Run migration
              echo "Running PgSTAC migrations..."
              pypgstac migrate
              
              # Apply settings
              echo "Applying PgSTAC settings..."
              psql -f /opt/settings/pgstac-settings.sql

              echo "PgSTAC migration and setup complete"
          resources:
            {{- toYaml .Values.pgstacBootstrap.settings.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /opt/settings
              name: pgstac-settings-volume-{{ $.Release.Name }}
          env:
            {{ include "eoapi.pgstacSecrets" . | nindent 12 }}
      volumes:
        - name: pgstac-settings-volume-{{ $.Release.Name }}
          configMap:
            name: pgstac-settings-config-{{ $.Release.Name }}
      {{- with .Values.pgstacBootstrap.settings.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.pgstacBootstrap.settings.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  backoffLimit: 1
{{- end }}

{{- if and .Values.pgstacBootstrap.enabled (or .Values.pgstacBootstrap.settings.loadSamples (eq .Values.pgstacBootstrap.settings.envVars.LOAD_FIXTURES "true")) }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: pgstac-load-samples
  labels:
    app: pgstac-load-samples
spec:
  template:
    metadata:
      labels:
        app: pgstac-load-samples
    spec:
      restartPolicy: Never
      initContainers:
        - name: wait-for-migrate
          image: busybox
          command:
            - 'sh'
            - '-c'
            - 'sleep 30; echo "Waiting for pgstac-migrate job to complete"; exit 0'
      containers:
        - name: pgstac-load-samples
          image: {{ .Values.pgstacBootstrap.image.name }}:{{ .Values.pgstacBootstrap.image.tag }}
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              # Exit immediately if a command exits with a non-zero status
              set -e
              
              # Set standard PG environment variables from secrets
              export PGHOST=$POSTGRES_HOST
              export PGPORT=$POSTGRES_PORT
              export PGUSER=$POSTGRES_USER
              export PGPASSWORD=$POSTGRES_PASS
              export PGDATABASE=$POSTGRES_DBNAME
              
              # Load sample data
              echo "Loading sample collections..."
              pypgstac load collections /opt/data/noaa-emergency-response.json --method insert_ignore
              
              echo "Loading sample items..."
              pypgstac load items /opt/data/noaa-eri-nashville2020.json --method insert_ignore
              
              echo "Running custom SQL..."
              psql -f /opt/sql/initdb.sql
              
              echo "Sample data loading complete"
          resources:
            {{- toYaml .Values.pgstacBootstrap.settings.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /opt/sql
              name: initdb-sql-volume-{{ $.Release.Name }}
            - mountPath: /opt/data
              name: initdb-json-volume-{{ $.Release.Name }}
          env:
            {{ include "eoapi.pgstacSecrets" . | nindent 12 }}
      volumes:
        - name: initdb-sql-volume-{{ $.Release.Name }}
          configMap:
            name: initdb-sql-config-{{ $.Release.Name }}
        - name: initdb-json-volume-{{ $.Release.Name }}
          configMap:
            name: initdb-json-config-{{ $.Release.Name }}
      {{- with .Values.pgstacBootstrap.settings.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.pgstacBootstrap.settings.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  backoffLimit: 1
{{- end }}
