comment_install: >
  `service` and `gitSha` are required and defaulted value keys.
  a manual installation looks like this:

  $ export GITSHA=$(git rev-parse HEAD | cut -c1-10)
  $ helm install \
      --namespace eoapi \
      --create-namespace \
      --set gitSha=$GITSHA \
      eoapi \
      ./eoapi

# the chart on the gh-pages branch will provide
# the correct updated value otherwise it's defaulted
gitSha: "gitshaABC123"

######################
# TESTING
######################
# only used in CI for running parallel helm installs
testing: false

#######################
# SERVICE ACCOUNT
#######################
serviceAccount:
  create: true
  name: ""
  automount: true
  annotations: {}
  labels: {}

######################
# SERVICE & INGRESS
######################
service:
  port: 8080

ingress:
  # Unified ingress configuration for both nginx and traefik
  enabled: true
  # ingressClassName: "nginx" or "traefik"
  className: "nginx"
  rootPath: ""        # Root path for doc server
  # Single host domain configuration (default)
  host: ""
  # Multiple host domains array - if specified, takes precedence over single host
  # hosts: []
  # Custom annotations to add to the ingress
  annotations: {}
  # TLS configuration
  tls:
    enabled: false
    secretName: eoapi-tls

######################
# DATABASE
######################
comment_db: >
  We use the crunchydata postgres operator/cluster charts as the k8s internal HA solution for eoapi.
  Those charts are therefore listed as a dependency of this chart in `Chart.yaml`.

  0. make sure to install the operator first `helm install --set disable_check_for_upgrades=true pgo oci://registry.developers.crunchydata.com/crunchydata/pgo`
  1. it will create a postgres cluster: see `postgrescluster.instances` spec below
  2. will will also create user credentials and mount their secrets: see `postgrescluster.users` spec below

  The `postgrescluster` specs below are pass-through values to configure those separate
  charts. For more information read https://access.crunchydata.com/documentation/postgres-operator/latest

# unified PostgreSQL configuration
postgresql:
  # Management type: "postgrescluster" (default), "external-plaintext", or "external-secret"
  type: "postgrescluster"

  # Configuration for external PostgreSQL (used when type is "external-plaintext" or "external-secret")
  external:
    # Connection information
    host: ""
    port: "5432"
    database: "eoapi"

    # Credentials configuration (used when type is "external-plaintext")
    credentials:
      username: ""
      password: ""

    # Secret reference (used when type is "external-secret")
    existingSecret:
      name: ""
      # Key mapping for the secret
      keys:
        username: "username"
        password: "password"
        # Optional: if these are provided in the secret
        # Note: These values override external.host, external.port and external.database if defined
        host: "host"
        port: "port"
        database: "database"

# this is declared as a dependency of eoapi in charts/eoapi/Chart.yaml
postgrescluster:
  enabled: true
  # The name of the postgres cluster
  # name: pgstac
  postgresVersion: 16
  postGISVersion: "3.4"
  pgBouncerReplicas: 1
  monitoring: false
  # Configure Patroni to set proper schema permissions
  patroni:
    dynamicConfiguration:
      postgresql:
        pg_hba:
          - "host all all 0.0.0.0/0 md5"
        parameters:
          shared_preload_libraries: pg_stat_statements, auto_explain
  databaseInitSQL:
    key: initdb.sql
    name: initdb

  instances:
  - name: eoapi
    replicas: 1
    dataVolumeClaimSpec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "10Gi"
          cpu: "1024m"
          memory: "3048Mi"
  # https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/user-management
  users:
    # `postgres` always has SUPERUSER privileges
    # we use this block here to create secrets for the `postgres` user that we can mount and lookup
    - name: postgres
      databases:
        - eoapi
        - postgres
      options: "SUPERUSER"
    # Grant CREATEROLE privilege to eoapi user so it can create the pgstac_admin role
    # If you grant SUPERUSER to the eoapi user, it won't be able to connect through pgbouncer
    # https://access.crunchydata.com/documentation/crunchy-postgres-containers/2.4.2/container-specifications/crunchy-pgbouncer/
    - name: eoapi
      databases:
        - eoapi
        - postgres
      options: "CREATEDB CREATEROLE"
      # default `password.type` is ASCII which follows the character set US-ASCII
      # but which can contain characters that `asyncpg` dislikes
      # see https://github.com/MagicStack/asyncpg/issues/1151
      password:
        type: AlphaNumeric

# `pgstacBootstrap` is a pod that by default runs pgstac schema migrations
# and optionally loads some fixtures for testing and examples
# using the LOAD_FIXTURES env var below
pgstacBootstrap:
  enabled: true
  image:
    name: ghcr.io/stac-utils/pgstac-pypgstac
    tag: v0.9.8
  settings:
    # General configuration options
    loadSamples: true      # Set to false to disable sample data loading
    
    # Wait configuration for init containers waiting for pgstac jobs
    # These parameters control how long services wait for pgstac migration jobs to complete
    waitConfig:
      # Sleep interval between job status checks (in seconds)
      sleepInterval: 5
      # Maximum time to wait for jobs to complete (in seconds) 
      # Default: 900 seconds (15 minutes)
      timeout: 900
    ### Database connection settings TEMPORARY UNTIL WE HAVE A BETTER SOLUTION
    ### FOR CONFIGURING THE DB CONNECTION
    user: eoapi
    database: eoapi
    resources:
      requests:
        cpu: "512m"
        memory: "1024Mi"
      limits:
        cpu: "512m"
        memory: "1024Mi"
    # DEPRECATED: Use pgstacBootstrap.settings.loadSamples instead
    envVars:
      # toggle to "false" if you don't want fixtures default loaded
      LOAD_FIXTURES: "true"

######################
# API SERVICES
######################
apiServices:
  - raster
  - multidim
  - stac
  - vector

raster:
  enabled: true
  ingress:
    enabled: true  # Control ingress specifically for raster service
    path: "/raster"  # Configurable path prefix for the raster service
  autoscaling:
    # NOTE: to have autoscaling working you'll need to install the `eoapi-support` chart
    # see ../../../docs/autoscaling.md for more information
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    # `type`: "cpu" || "requestRate" || "both"
    type: "requestRate"
    behaviour:
      scaleDown:
        stabilizationWindowSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 0
    targets:
      # matches `type` value above unless `type: "both"` is selected
      cpu: 75
      # 'm' units here represents generic milli (one-thousandth) unit instead of 'decimal'
      # https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/#quantities
      # so when the average unit among these pods is <requestRate>/1000 then scale
      # you can watch the actual/target in real time using `kubectl get hpa/<name>`
      requestRate: 100000m
  image:
    name: ghcr.io/stac-utils/titiler-pgstac
    tag: 1.7.2
  command:
    - "uvicorn"
    - "titiler.pgstac.main:app"
    - "--host=$(HOST)"
    - "--port=$(PORT)"
  settings:
    # Additional labels to add to the pod
    labels: {}
    # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    resources:
      limits:
        cpu: "768m"
        memory: "4096Mi"
      requests:
        cpu: "256m"
        memory: "3072Mi"
    # Additional environment variables from references like ConfigMap or Secret
    extraEnvFrom: []
    # Additional volume mounts
    extraVolumeMounts: []
    # Additional volumes
    extraVolumes: []
    envVars:
      ##############
      # titiler
      ##############
      GDAL_CACHEMAX: "200"  # 200 mb
      GDAL_DISABLE_READDIR_ON_OPEN: "EMPTY_DIR"
      GDAL_INGESTED_BYTES_AT_OPEN: "32768"
      GDAL_HTTP_MERGE_CONSECUTIVE_RANGES: "YES"
      GDAL_HTTP_MULTIPLEX: "YES"
      GDAL_HTTP_VERSION: "2"
      PYTHONWARNINGS: "ignore"
      VSI_CACHE: "TRUE"
      VSI_CACHE_SIZE: "5000000"  # 5 MB (per file-handle)
      ##############
      # uvicorn
      ##############
      HOST: "0.0.0.0"
      PORT: "8080"
      # https://www.uvicorn.org/settings/#production
      WEB_CONCURRENCY: "5"

multidim:
  enabled: false # disabled by default
  ingress:
    enabled: true  # Control ingress specifically for multidim service
    path: "/multidim"  # Configurable path prefix for the multidim service
  autoscaling:
    # NOTE: to have autoscaling working you'll need to install the `eoapi-support` chart
    # see ../../../docs/autoscaling.md for more information
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    # `type`: "cpu" || "requestRate" || "both"
    type: "requestRate"
    behaviour:
      scaleDown:
        stabilizationWindowSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 0
    targets:
      # matches `type` value above unless `type: "both"` is selected
      cpu: 75
      # 'm' units here represents generic milli (one-thousandth) unit instead of 'decimal'
      # https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/#quantities
      # so when the average unit among these pods is <requestRate>/1000 then scale
      # you can watch the actual/target in real time using `kubectl get hpa/<name>`
      requestRate: 100000m
  image:
    name: ghcr.io/developmentseed/titiler-md-demo
    tag: dd740a700ce655e785c7bd50331f9ac857be4126
  command:
    - "uvicorn"
    - "titiler_md_demo.main:app"
    - "--host=$(HOST)"
    - "--port=$(PORT)"
  settings:
    # Additional labels to add to the pod
    labels: {}
    # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    resources:
      limits:
        cpu: "768m"
        memory: "4096Mi"
      requests:
        cpu: "256m"
        memory: "3072Mi"
    # Additional environment variables from references like ConfigMap or Secret
    extraEnvFrom: []
    # Additional volume mounts
    extraVolumeMounts: []
    # Additional volumes
    extraVolumes: []
    envVars:
      ##############
      # titiler
      ##############
      GDAL_CACHEMAX: "200"  # 200 mb
      GDAL_DISABLE_READDIR_ON_OPEN: "EMPTY_DIR"
      GDAL_INGESTED_BYTES_AT_OPEN: "32768"
      GDAL_HTTP_MERGE_CONSECUTIVE_RANGES: "YES"
      GDAL_HTTP_MULTIPLEX: "YES"
      GDAL_HTTP_VERSION: "2"
      PYTHONWARNINGS: "ignore"
      VSI_CACHE: "TRUE"
      VSI_CACHE_SIZE: "5000000"  # 5 MB (per file-handle)
      ##############
      # uvicorn
      ##############
      HOST: "0.0.0.0"
      PORT: "8080"
      # https://www.uvicorn.org/settings/#production
      WEB_CONCURRENCY: "5"

stac:
  enabled: true
  ingress:
    enabled: true  # Control ingress specifically for stac service
    path: "/stac"  # Configurable path prefix for the stac service
  autoscaling:
    # NOTE: to have autoscaling working you'll need to install the `eoapi-support` chart
    # see ../../../docs/autoscaling.md for more information
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    # `type`: "cpu" || "requestRate" || "both"
    type: "requestRate"
    behaviour:
      scaleDown:
        stabilizationWindowSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 0
    targets:
      # matches `type` value above unless `type: "both"` is selected
      cpu: 75
      # 'm' units here represents generic milli (one-thousandth) unit instead of 'decimal'
      # https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/#quantities
      # so when the average unit among these pods is <requestRate>/1000 then scale
      # you can watch the actual/target in real time using `kubectl get hpa/<name>`
      requestRate: 100000m
  image:
    name: ghcr.io/stac-utils/stac-fastapi-pgstac
    tag: 6.0.0
  command:
    - "uvicorn"
    - "stac_fastapi.pgstac.app:app"
    - "--host=$(HOST)"
    - "--port=$(PORT)"
  settings:
    # Additional labels to add to the pod
    labels: {}
    # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    resources:
      limits:
        cpu: "768m"
        memory: "1024Mi"
      requests:
        cpu: "256m"
        memory: "1024Mi"
    # Additional environment variables from references like ConfigMap or Secret
    extraEnvFrom: []
    # Additional volume mounts
    extraVolumeMounts: []
    # Additional volumes
    extraVolumes: []
    envVars:
      ##############
      # uvicorn
      ##############
      HOST: "0.0.0.0"
      PORT: "8080"
      # https://www.uvicorn.org/settings/#production
      WEB_CONCURRENCY: "5"

vector:
  enabled: true
  ingress:
    enabled: true  # Control ingress specifically for vector service
    path: "/vector"  # Configurable path prefix for the vector service
  autoscaling:
    # NOTE: to have autoscaling working you'll need to install the `eoapi-support` chart
    # see ../../../docs/autoscaling.md for more information
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    # `type`: "cpu" || "requestRate" || "both"
    type: "requestRate"
    behaviour:
      scaleDown:
        stabilizationWindowSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 0
    targets:
      # matches `type` value above unless `type: "both"` is selected
      cpu: 75
      # 'm' units here represents generic milli (one-thousandth) unit instead of 'decimal'
      # https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/#quantities
      # so when the average unit among these pods is <requestRate>/1000 then scale
      # you can watch the actual/target in real time using `kubectl get hpa/<name>`
      requestRate: 100000m
  image:
    name: ghcr.io/developmentseed/tipg
    tag: 1.2.1
  command:
    - "uvicorn"
    - "tipg.main:app"
    - "--host=$(HOST)"
    - "--port=$(PORT)"
  settings:
    # Additional labels to add to the pod
    labels: {}
    # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    resources:
      limits:
        cpu: "768m"
        memory: "1024Mi"
      requests:
        cpu: "256m"
        memory: "256Mi"
    # Additional environment variables from references like ConfigMap or Secret
    extraEnvFrom: []
    # Additional volume mounts
    extraVolumeMounts: []
    # Additional volumes
    extraVolumes: []
    envVars:
      ##############
      # tipg
      ##############
      TIPG_CATALOG_TTL: "300"
      TIPG_DEBUG: "True"
      ##############
      # uvicorn
      ##############
      HOST: "0.0.0.0"
      PORT: "8080"
      # https://www.uvicorn.org/settings/#production
      WEB_CONCURRENCY: "5"

######################
# STAC Browser
######################
# It is a good idea to deploy stac-browser outside of k8s, since it's SPA with static files.
browser:
  enabled: true
  replicaCount: 1
  image:
    # we use a custom image with pathPrefix built into it
    name: ghcr.io/developmentseed/eoapi-k8s-stac-browser
    tag: 3.3.4
  ingress:
    enabled: true  # Control ingress specifically for browser service

docServer:
  enabled: true

# Version being upgraded from, used for migration purposes
# Dont set the value in the values.yaml file
# prefer to set it in the command line
# helm upgrade --set previousVersion=$PREVIOUS_VERSION
# or in the CI/CD pipeline
previousVersion: ""
