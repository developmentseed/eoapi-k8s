{{- if .Values.pgstacBootstrap.enabled }}
---
# This job initializes the PostgreSQL database with the necessary schema and data.
# Instead of using an initContainer in the deployment to wait for this job to complete,
# we use Helm hooks to control the execution order:
#
# 1. The "post-install,post-upgrade" hook ensures this job runs after the postgres
#    dependency is installed but before other resources (like deployments)
# 2. The "-5" hook-weight ensures this job runs after its ConfigMaps (weight -6)
# 3. The "before-hook-creation,hook-succeeded" delete policy ensures the job is recreated
#    on each helm install/upgrade and is cleaned up after successful completion
#
# DEBUGGING NOTES:
# If the job fails with "BackoffLimitExceeded" error:
# 1. Check database connectivity - ensure the database is running and accessible
# 2. Check database credentials - make sure POSTGRES_HOST, POSTGRES_PORT, etc. are correct
# 3. Check for pgstac migration errors - examine container logs for migration failures
# 4. Verify database initialization - ensure postgres extensions and roles are created
#
# The CI workflow has been enhanced with a debug step that captures comprehensive logs
# from all pgstac-migrate pods to help diagnose failures during testing.
#
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-pgstac-migrate
  labels:
    app: {{ .Release.Name }}-pgstac-migrate
  annotations:
    helm.sh/hook: "post-install,post-upgrade"
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: "before-hook-creation"
spec:
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-pgstac-migrate
    spec:
      restartPolicy: Never
      containers:
        - name: pgstac-migrate
          image: {{ .Values.pgstacBootstrap.image.name }}:{{ .Values.pgstacBootstrap.image.tag }}
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              # Database connection configured through standard PG* environment variables
              # Environment variables are already set by the container

              # Wait for the database to be ready
              echo "Waiting for database to be ready..."
              pypgstac pgready

              # Exit immediately if a command exits with a non-zero status
              set -e

              # Run migration
              echo "Running PgSTAC migrations..."
              pypgstac migrate

              # Apply settings
              echo "Applying PgSTAC settings..."
              psql -f /opt/settings/pgstac-settings.sql

              echo "PgSTAC migration and setup complete"
          resources:
            {{- toYaml .Values.pgstacBootstrap.settings.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /opt/settings
              name: {{ .Release.Name }}-pgstac-settings-volume
          env:
            {{- include "eoapi.postgresqlEnv" . | nindent 12 }}
      volumes:
        - name: {{ .Release.Name }}-pgstac-settings-volume
          configMap:
            name: {{ .Release.Name }}-pgstac-settings-config
      {{- with .Values.pgstacBootstrap.settings.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.pgstacBootstrap.settings.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  backoffLimit: 1
{{- end }}

{{- if and .Values.pgstacBootstrap.enabled .Values.pgstacBootstrap.settings.loadSamples }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-pgstac-load-samples
  labels:
    app: {{ .Release.Name }}-pgstac-load-samples
  annotations:
    helm.sh/hook: "post-install,post-upgrade"
    helm.sh/hook-weight: "-4"
    helm.sh/hook-delete-policy: "before-hook-creation"
spec:
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-pgstac-load-samples
    spec:
      restartPolicy: Never
      containers:
        - name: pgstac-load-samples
          image: {{ .Values.pgstacBootstrap.image.name }}:{{ .Values.pgstacBootstrap.image.tag }}
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              # Exit immediately if a command exits with a non-zero status
              set -e

              # Database connection configured through standard PG* environment variables
              # Environment variables are already set by the container

              # Load sample data
              echo "Loading sample collections..."
              pypgstac load collections /opt/data/noaa-emergency-response.json --method insert_ignore

              echo "Loading sample items..."
              pypgstac load items /opt/data/noaa-eri-nashville2020.json --method insert_ignore

              echo "Running custom SQL..."
              psql -f /opt/sql/initdb.sql

              echo "Sample data loading complete"
          resources:
            {{- toYaml .Values.pgstacBootstrap.settings.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /opt/sql
              name: {{ .Release.Name }}-initdb-sql-volume
            - mountPath: /opt/data
              name: {{ .Release.Name }}-initdb-json-volume
          env:
            {{- include "eoapi.postgresqlEnv" . | nindent 12 }}
      volumes:
        - name: {{ .Release.Name }}-initdb-sql-volume
          configMap:
            name: {{ .Release.Name }}-initdb-sql-config
        - name: {{ .Release.Name }}-initdb-json-volume
          configMap:
            name: {{ .Release.Name }}-initdb-json-config
      {{- with .Values.pgstacBootstrap.settings.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.pgstacBootstrap.settings.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  backoffLimit: 3
{{- end }}

{{- if and .Values.pgstacBootstrap.enabled .Values.pgstacBootstrap.settings.queryables }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-pgstac-load-queryables
  labels:
    app: {{ .Release.Name }}-pgstac-load-queryables
  annotations:
    helm.sh/hook: "post-install,post-upgrade"
    helm.sh/hook-weight: "-3"
    helm.sh/hook-delete-policy: "before-hook-creation"
spec:
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-pgstac-load-queryables
    spec:
      restartPolicy: Never
      containers:
        - name: pgstac-load-queryables
          image: {{ .Values.pgstacBootstrap.image.name }}:{{ .Values.pgstacBootstrap.image.tag }}
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              # Exit immediately if a command exits with a non-zero status
              set -e

              # Database connection configured through standard PG* environment variables
              # Environment variables are already set by the container

              # Wait for the database to be ready
              echo "Waiting for database to be ready..."
              pypgstac pgready

              # Load queryables configurations
              echo "Loading queryables configurations..."
              {{- range $idx, $config := .Values.pgstacBootstrap.settings.queryables }}
              {{- $filename := splitList "/" $config.file | last }}
              echo "Processing queryables file: {{ $filename }}"
              pypgstac load-queryables \
              {{- if $config.deleteMissing }}
                --delete-missing \
              {{- end }}
              {{- if $config.collections }}
                # Complex escaping needed due to multiple interpretation layers:
                # 1. Helm processes the template: \\\" becomes \" in the rendered YAML
                # 2. YAML processes the string: \" becomes " in the shell script
                # 3. Shell receives: --collection-ids '["collection1","collection2"]'
                # 4. pypgstac gets a proper JSON array string as expected
                --collection-ids "[\\\"{{ join "\\\",\\\"" $config.collections }}\\\"]" \
              {{- end }}
              {{- if $config.indexFields }}
                --index-fields {{ join "," $config.indexFields }} \
              {{- end }}
                "/opt/queryables/{{ $filename }}"
              {{- end }}

              echo "Queryables loading complete"
          resources:
            {{- toYaml .Values.pgstacBootstrap.settings.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /opt/queryables
              name: {{ .Release.Name }}-queryables-volume
          env:
            {{- include "eoapi.postgresqlEnv" . | nindent 12 }}
      volumes:
        - name: {{ .Release.Name }}-queryables-volume
          configMap:
            name: {{ .Release.Name }}-pgstac-queryables-config
      {{- with .Values.pgstacBootstrap.settings.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.pgstacBootstrap.settings.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  backoffLimit: 3
{{- end }}
