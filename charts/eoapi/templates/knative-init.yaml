{{- if .Values.knative.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-knative-init
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "eoapi.labels" . | nindent 4 }}
    app.kubernetes.io/component: knative-init
  annotations:
    helm.sh/hook: "post-install,post-upgrade"
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: "before-hook-creation,hook-succeeded"
spec:
  template:
    metadata:
      name: {{ .Release.Name }}-knative-init
      labels:
        {{- include "eoapi.labels" . | nindent 8 }}
        app.kubernetes.io/component: knative-init
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "eoapi.serviceAccountName" . }}
      containers:
      - name: knative-init
        image: bitnami/kubectl:latest
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "=== Knative Initialization ==="

          # Wait for knative-operator with exponential backoff
          echo "Waiting for knative-operator deployment to be available..."
          RELEASE_NAMESPACE="{{ .Release.Namespace }}"
          OPERATOR_NAMESPACE=""
          max_attempts=30
          attempt=1
          backoff=10

          echo "=== Initial Debugging Info ==="
          echo "Release namespace: $RELEASE_NAMESPACE"
          echo "Current deployments in release namespace:"
          kubectl get deployments -n "$RELEASE_NAMESPACE" -o wide 2>/dev/null || echo "No deployments in release namespace"
          echo "All deployments across cluster:"
          kubectl get deployments --all-namespaces | grep -v "^NAMESPACE" | head -10
          echo ""

          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Looking for knative-operator..."

            # Check multiple possible patterns for knative-operator
            # Pattern 1: Standard deployment name in release namespace
            if kubectl get deployment knative-operator -n "$RELEASE_NAMESPACE" >/dev/null 2>&1; then
              OPERATOR_NAMESPACE="$RELEASE_NAMESPACE"
              echo "✅ Found knative-operator deployment in release namespace: $OPERATOR_NAMESPACE"
              break
            fi

            # Pattern 2: Check by app.kubernetes.io/name label
            OPERATOR_NAMESPACE=$(kubectl get deployment -l app.kubernetes.io/name=knative-operator --all-namespaces -o jsonpath='{.items[0].metadata.namespace}' 2>/dev/null || echo "")
            if [ -n "$OPERATOR_NAMESPACE" ]; then
              echo "✅ Found knative-operator by label in namespace: $OPERATOR_NAMESPACE"
              break
            fi

            # Pattern 3: Check by name across all namespaces
            OPERATOR_NAMESPACE=$(kubectl get deployment knative-operator --all-namespaces -o jsonpath='{.items[0].metadata.namespace}' 2>/dev/null || echo "")
            if [ -n "$OPERATOR_NAMESPACE" ]; then
              echo "✅ Found knative-operator by name in namespace: $OPERATOR_NAMESPACE"
              break
            fi

            # Pattern 4: Check for any deployment with knative in the name
            KNATIVE_DEPLOYMENTS=$(kubectl get deployments --all-namespaces | grep -i knative || echo "")
            if [ -n "$KNATIVE_DEPLOYMENTS" ]; then
              echo "Found knative-related deployments:"
              echo "$KNATIVE_DEPLOYMENTS"
            fi

            echo "⏳ knative-operator not found, waiting ${backoff}s before retry..."
            echo "Current time: $(date)"
            sleep $backoff
            attempt=$((attempt + 1))
          done

          if [ -z "$OPERATOR_NAMESPACE" ]; then
            echo "❌ knative-operator deployment not found after $max_attempts attempts"
            echo ""
            echo "=== Comprehensive Debugging Information ==="
            echo "Search completed at: $(date)"
            echo "Release namespace: $RELEASE_NAMESPACE"
            echo ""

            echo "=== Helm Status ==="
            echo "Helm releases in current namespace:"
            helm list -n "$RELEASE_NAMESPACE" -o table || echo "No helm releases found"
            echo ""

            echo "=== Kubernetes Resources ==="
            echo "All deployments in release namespace:"
            kubectl get deployments -n "$RELEASE_NAMESPACE" -o wide || echo "No deployments in release namespace"
            echo ""
            echo "All deployments across cluster:"
            kubectl get deployments --all-namespaces -o wide
            echo ""
            echo "All pods in release namespace:"
            kubectl get pods -n "$RELEASE_NAMESPACE" -o wide || echo "No pods in release namespace"
            echo ""

            echo "=== Knative Investigation ==="
            echo "Knative CRDs:"
            kubectl get crd | grep knative || echo "No knative CRDs"
            echo ""
            echo "Any resources with 'knative' in name:"
            kubectl get all --all-namespaces | grep -i knative || echo "No knative resources found"
            echo ""

            echo "=== Events and Logs ==="
            echo "Recent events in release namespace:"
            kubectl get events -n "$RELEASE_NAMESPACE" --sort-by='.lastTimestamp' | tail -15 || echo "No events"
            echo ""
            echo "Recent events cluster-wide:"
            kubectl get events --all-namespaces --sort-by='.lastTimestamp' | tail -10 || echo "No events"
            echo ""

            echo "=== Final Status ==="
            echo "This indicates that the knative-operator Helm dependency was not installed properly."
            echo "Check that the knative-operator chart is available in the configured repository."

            echo ""
            echo "⚠️  GRACEFUL DEGRADATION: Continuing without Knative setup"
            echo "⚠️  Knative features will not be available in this deployment"
            echo "✅ Job completed successfully (without Knative)"
            exit 0
          fi

          echo "Waiting for knative-operator deployment to be ready in namespace: $OPERATOR_NAMESPACE"
          echo "Deployment details:"
          kubectl get deployment knative-operator -n "$OPERATOR_NAMESPACE" -o wide

          if ! kubectl rollout status deployment/knative-operator -n "$OPERATOR_NAMESPACE" --timeout=300s; then
            echo "❌ knative-operator failed to become ready within timeout"
            echo ""
            echo "=== Deployment Debug Info ==="
            echo "Deployment description:"
            kubectl describe deployment knative-operator -n "$OPERATOR_NAMESPACE"
            echo ""
            echo "Pod status (by deployment labels):"
            kubectl get pods -n "$OPERATOR_NAMESPACE" -l app.kubernetes.io/name=knative-operator -o wide
            echo ""
            echo "Pod status (by legacy labels):"
            kubectl get pods -n "$OPERATOR_NAMESPACE" -l name=knative-operator -o wide
            echo ""
            echo "All pods in operator namespace:"
            kubectl get pods -n "$OPERATOR_NAMESPACE" -o wide
            echo ""
            echo "Pod logs (if any exist):"
            kubectl logs -l app.kubernetes.io/name=knative-operator -n "$OPERATOR_NAMESPACE" --tail=30 || echo "No logs from app.kubernetes.io/name=knative-operator"
            kubectl logs -l name=knative-operator -n "$OPERATOR_NAMESPACE" --tail=30 || echo "No logs from name=knative-operator"
            echo ""
            echo "Recent events in operator namespace:"
            kubectl get events -n "$OPERATOR_NAMESPACE" --sort-by='.lastTimestamp' | tail -15
            echo ""
            echo "⚠️  GRACEFUL DEGRADATION: knative-operator found but not ready"
            echo "⚠️  Continuing without Knative setup to avoid deployment timeout"
            echo "⚠️  Knative features will not be available in this deployment"
            echo "✅ Job completed successfully (without Knative)"
            exit 0
          fi

          echo "✅ knative-operator is ready, proceeding with Knative setup..."
          kubectl get pods -n "$OPERATOR_NAMESPACE" -l app.kubernetes.io/name=knative-operator -o wide

          # Create namespaces
          kubectl create namespace knative-serving --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace knative-eventing --dry-run=client -o yaml | kubectl apply -f -

          # Check if KnativeServing already exists
          if kubectl get knativeserving knative-serving -n knative-serving >/dev/null 2>&1; then
            echo "✅ KnativeServing already exists, checking status..."
          else
            # Create KnativeServing with Kourier ingress
            cat <<EOF | kubectl apply -f -
            apiVersion: operator.knative.dev/v1beta1
            kind: KnativeServing
            metadata:
              name: knative-serving
              namespace: knative-serving
            spec:
              version: {{ .Values.knative.version | quote }}
              ingress:
                kourier:
                  enabled: true
              config:
                network:
                  ingress-class: "kourier.ingress.networking.knative.dev"
                domain:
                  "127.0.0.1.nip.io": ""
          EOF
            echo "✅ KnativeServing created successfully"
          fi

          # Wait for KnativeServing to be ready
          echo "Waiting for KnativeServing to be ready..."
          timeout=300
          counter=0
          while [ $counter -lt $timeout ]; do
            if kubectl get knativeserving knative-serving -n knative-serving -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null | grep -q "True"; then
              echo "✅ KnativeServing is ready"
              break
            fi
            sleep 5
            counter=$((counter + 5))
            echo "⏳ Waiting for KnativeServing... ($counter/$timeout seconds)"
          done
          if [ $counter -ge $timeout ]; then
            echo "⚠️ KnativeServing not ready within timeout, but continuing..."
            kubectl get knativeserving knative-serving -n knative-serving -o yaml || true
          fi

          # Check if KnativeEventing already exists
          if kubectl get knativeeventing knative-eventing -n knative-eventing >/dev/null 2>&1; then
            echo "✅ KnativeEventing already exists, checking status..."
          else
            # Create KnativeEventing
            cat <<EOF | kubectl apply -f -
            apiVersion: operator.knative.dev/v1beta1
            kind: KnativeEventing
            metadata:
              name: knative-eventing
              namespace: knative-eventing
            spec:
              version: {{ .Values.knative.version | quote }}
          EOF
            echo "✅ KnativeEventing created successfully"
          fi

          # Wait for KnativeEventing to be ready
          echo "Waiting for KnativeEventing to be ready..."
          timeout=300
          counter=0
          while [ $counter -lt $timeout ]; do
            if kubectl get knativeeventing knative-eventing -n knative-eventing -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null | grep -q "True"; then
              echo "✅ KnativeEventing is ready"
              break
            fi
            sleep 5
            counter=$((counter + 5))
            echo "⏳ Waiting for KnativeEventing... ($counter/$timeout seconds)"
          done
          if [ $counter -ge $timeout ]; then
            echo "⚠️ KnativeEventing not ready within timeout, but continuing..."
            kubectl get knativeeventing knative-eventing -n knative-eventing -o yaml || true
          fi
          echo "✅ Knative CRs ready. Checking CRDs..."

          # Wait for essential CRDs to be available
          echo "Waiting for essential Knative CRDs to be created..."
          essential_crds=(
            "services.serving.knative.dev"
            "sinkbindings.sources.knative.dev"
          )

          for crd in "${essential_crds[@]}"; do
            echo "Checking for CRD: $crd"
            timeout=600
            counter=0
            while [ $counter -lt $timeout ]; do
              if kubectl get crd "$crd" >/dev/null 2>&1; then
                echo "✅ $crd is available"
                break
              fi
              sleep 10
              counter=$((counter + 10))
              if [ $((counter % 60)) -eq 0 ]; then
                echo "⏳ Still waiting for $crd... ($counter/$timeout seconds)"
                echo "Current KnativeServing status:"
                kubectl get knativeserving knative-serving -n knative-serving || echo "No KnativeServing found"
                echo "Current KnativeEventing status:"
                kubectl get knativeeventing knative-eventing -n knative-eventing || echo "No KnativeEventing found"
              fi
            done
            if [ $counter -ge $timeout ]; then
              echo "⚠️ Timeout waiting for $crd, but continuing..."
              echo "Available CRDs containing 'knative':"
              kubectl get crd | grep knative || echo "No knative CRDs found"
            fi
          done

          echo "✅ Knative initialization completed"

        resources:
          requests:
            cpu: 25m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
  backoffLimit: 2
  activeDeadlineSeconds: 1800
{{- end }}
